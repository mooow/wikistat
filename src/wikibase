#!/usr/bin/env python3

'''
Takes a sorted list of words (as generated by wikicount).
Generates a list of words of length ≥ 5 with Levenshtein distance ≥ 2
'''

import pickle, bz2
from Levenshtein import distance

print("Loading pickle...", end='', flush=True)
sorted_list = None
with bz2.open("sorted_list_i.pickle.bz2", "rb") as f:
    sorted_list = pickle.load(f)
print("[done]\n")


sorted_list[:] = [a for a,b in sorted_list]
N = len(sorted_list)
i = 0
M = 9000

base = []
for element in reversed(sorted_list):
    element = element.strip()
    if len(element) < 5: continue
    if base == [] or min([distance(element, i) for i in base]) > 1:
        base.append(element)
    i += 1
    print('\r{}/{}≅{}%'.format(i,M,100*i/M), end='', flush=True)
    if i == M: break

with bz2.open("base_9000_i5+.pickle.bz2", 'w') as f:
    pickle.dump(base,f)

with bz2.open("base_9000_i5+.txt.bz2", 'w') as f:
    for element in base: f.write((element+'\n').encode('utf-8'))
